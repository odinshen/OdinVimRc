##
##  Odin's note
##
FAST        ##  LIST
COMMAND     ##  LIST
WINDOWS     ##  LIST
FOLDING     ##  LIST
CTAG        ##  LIST
CSCOPE      ##  LIST
TAB         ##  LIST
EDIT        ##  LIST
MOVE        ##  LIST
FINDER      ##  LIST


##
##  Fast Key
##
##  <F1>    ##  Search string in onebase    ##  FAST    ##  @.vimrc
<F1>+k          List Key"
<F5>            Folding"
<F6>            Fuzzy"
<F7>            Project"
<F8>            Buffer"
<F9>            Search"
<F11>           Split"
<F12>           Tab"

<F5>            Folding"
<F5>+o          Open"
<F5>+c          Close"

<F6>            Fuzzy"
<F6>+a          Add BookMark"
<F6>+b          List BookMark"
<F6>+f          Files"
<F6>+d          Dirs"
<F6>+t          Tag"
<F6>+tf         Tagged Files"
<F6>+mc         MRU Commands"
<F6>+mf         MRU Files"

<F7>            Project"
<F7>+s          Set"
<F7>+p          Print"
<F7>+c          Clear"
<F7>+l          List"
<F7>+r          Load To Ram"
<F7>+b          Store Back From Ram"

<F8>            Buffer"
<F8>+i          Buffer Info"
<F8>+d          Del All Buffers"
<F8>+s          vimgrep Buffers"
<F8>+l          lvimgrep Buffers"

<F9>            Search"
<F9>+g          @ current folder "
<F9>+G          @ current folder & sub-folder"
# one-based related searching
# <F9>+a          All Souec"
# <F9>+c          Related CPP/H"
# <F9>+h          config.h"
# <F9>+l          .lst"
# <F9>+r          .hex"
# <F9>+f          IFP folder"


<F11>           Split"
<F11>+s         Same File"
<F11>+c         Related CPP"
<F11>+h         Related H"
<F11>+i         Related II"
vcfg            Split Open config.h



<F12>           Tab"
<F12>+0         Next"
<F12>+9         Prev"
<F12>+n         New"
<F12>+s         Same File"
<F12>+r         Shift Right"
<F12>+l         Shift Left"
<F12>+c         Related CPP"
<F12>+h         Related H"
<F12>+u         Related II"


\       ##  leader

##
##  Command
##
!       ##  input shell command         ##  COMMAND
m[a-z]  ##  Book Mark a~z               ##  COMMAND
`[-z]   ##  Jump to backward quote      ##  COMMAND
'[-z]   ##  Jump to forward quote       ##  COMMAND
qall    ##  Close all windows
vv      ##  V-split view same code 
tv      ##  Open new tab for the same code
cd.     ##  Change the direction to current 

##
##  Windows
##
<CTRL> + w + w      ##  Change Windows              ##  WINDOWS
<CTRL> + w + s      ##  Split Windows               ##  WINDOWS
<CTRL> + w + v      ##  Split V-Windows             ##  WINDOWS
:split [FILE_NAME]  ##  Herzional Windows           ##  WINDOWS
:vsplit [FILE_NAME] ##  Verical Windows             ##  WINDOWS
:ZZ                 ##  Close Wwindows              ##  WINDOWS
<CTRL> W + X        ##  Switch Windows on one page  ## WINDOWS


##
##  Folding
##
:zm                 ##  Open Folding            ##  FOLDING 
:zr                 ##  Close Folding           ##  FOLDING
:zo                 ##  Open Folding            ##  FOLDING 
:zc                 ##  Close Folding           ##  FOLDING
:zn                 ##  Open All Folding        ##  FOLDING
:zN                 ##  Close All Folding       ##  FOLDING
:za                 ##  Open or Close Folding   ##  FOLDING 


##
##  cTags
##
ctags -R            ##  Create ctags            ##  CTAGS          
<CTRL> + ]          ##  Jump to Reference       ##  CTAGS
<CTRL> + t          ##  Go Back                 ##  CTAGS
ta                  ##  Jump to Tag             ##  CTAGS


##
##  cScope
##
##  Create cscope
find $1 -iname '*.[CH]' -o -name '*.cpp' -o -name '*.cc' -o -name '*.hpp' > cscope.files    ##  CSCOPE: Create cscope.files
cscope -b -q -k     ##  Generate .out file when cscope.files ready                          ##  CSCOPE
cscope -bqR         ##  Direct Generate File                                                ##  CSCOPE
cscope              ##  For standalone use                                                  ##  CSCOPE
<TAB>               ##  Switch command and search item                                      ##  CSCOPE
CRTL-D              ##  Exit cscope program                                                 ##  CSCOPE

csfc [NAME]         ##  Find  [Functions CALLING]       this function                       ##  CSCOPE
csfd [NAME]         ##  Find  [Functions [CALLED BY]    this function                       ##  CSCOPE
csfe [PATTERN]      ##  Find  [EGREP Pattern]                                               ##  CSCOPE
csff [FILE]         ##  Find  [FILE]                                                        ##  CSCOPE
csfg [NAME]         ##  Find  [DEFINITION]                                                  ##  CSCOPE
csfi [NAME]         ##  Find  [FILES #including]        this file                           ##  CSCOPE
csfs [C SYMBOL]     ##  Find  [C symbol]                                                    ##  CSCOPE      HOT
csft [NAME]         ##  Find  [ASSIGNMENTS TO]                                              ##  CSCOPE
<CTRL> + '\' + c|d|e|f|g|i|s|t      ##  Same With csf                                       ##  CSCOPE
<CTRL> + t          ##  Jump back

##
##  TAB
##
:tabedit [FILE_NAME]    ##  Create New Tab      ##  TAB
:te [FILE_NAME]         ##  Create New Tab      ##  TAB
:tn                     ##  Go Next Tab         ##  TAB
:tp                     ##  Go Prev Tab         ##  TAB
:tabclose               ##  CLOSE Tab           ##  TAB
:set scrollbind         ##  Set sync
:set noscrollbind       ##  Set non-sync
t                       ##  open select into new tab on NERD_TREE


##
##  Edit
##
:u          ##  Recover                     ##  EDIT
<CTRL> r    ##  Re-Do                       ##  EDIT
%           ##  Jump tp Block Start/End     ##  EDIT
v           ##  Select 'char'               ##  EDIT
V           ##  Select 'line'               ##  EDIT
<CTRL> v    ##  Select block on Linux       ##  EDIT
<CTRL> q    ##  Select block on Windows     ##  EDIT
EL          ##  Remove empty line           ##  EDIT
el          ##  Remove empty line           ##  EDIT
v+r         ##  Change to little case       ##  EDIT


##
##  Arrange block & empty line
##
gg          ##  Jump to top of file
V           ##  Change Visual mode
Ctrl+Q      ##  Change Visual mode on MS

G           ##  Select to End of file
=           ##  Re-arrange block
g/^$/d      ##  Remove all empty line



##
##  MOVE
##
gg         ## Jump to top line of file
:m[a-z]     ##  Book Mark a~z                   ##  MOVE
:`[a-z]     ##  Jump to backward quote          ##  MOVE
:'[a-z]     ##  Jump to forward quote           ##  MOVE
zz         ##  Move to MIDDLE of screen        ##  MOVE
zt         ##  Move to TOP of screen           ##  MOVE
zb         ##  Move to BUTTOM of screen        ##  MOVE
##:mm         ##  Enable/Disable BookMark Line    ##  MOVE
##<F9>        ##  Jump to Next BookMark           ##  MOVE
}           ##  Next Block
{           ##  previous Block
f + [CHAR]  ##  Search the next char in this line
F + [CHAR]  ##  Search the previous char in this line
w           ##  Jump to next word
b           ##  Jump to previous word
gd          ##  Jump to defineation of <CWORD>

##  
##  FINDER
##
ff          ##  FuzzyFinderFile             ##  FINDER 
fd          ##  FuzzyFinderDir              ##  FINDER
fba         ##  FuzzyFinderAddBookmark      ##  FINDER  ## BOOKMARK                    Hot
fbl         ##  FuzzyFinderBookmark         ##  FINDER  ## BOOKMARK                    Hot
fu          ##  FuzzyFinderBuffer           ##  FINDER  ## BUFFER                      Hot
ft          ##  FuzzyFinderTag              ##  FINDER                                 Hot
ftf         ##  FuzzyFinderTaggedFile       ##  FINDER                                 Hot
fmc         ##  FuzzyFinderMruCmd           ##  FINDER
fmf         ##  FuzzyFinderMruFile          ##  FINDER
<CTRL> + j  ##  Open to Horizonal Windows   ##  FINDER
<CTRL> + k  ##  Open to Vertical Windows    ##  FINDER
<CTRL> + l  ##  Open to New TAB Windows     ##  FINDER
<F8>        ##  SET A BOOKMARK              ##  FINDER  ##  BOOKMARK
<F9>        ##  LIST ALL BOOKMARK           ##  FINDER  ##  BOOKMARK


##
##  LILICOCO
##
:te +/STRING_NAME FILE_NAME    ## Open and high-light STRING


##
##  GREP
##
:/STRING_NAME/ FILE_NAME
<F1>        ##  Search All STRING_NAME


##
##  Buffer
##
\be         ## (normal open) 
\bs         ## (force horizontal split open)
\bv         ## (force vertical split open) 
:buffers    ## List all buffers
:bnext      ## Go Next buffers
:bprev      ## Go Prev buffers
:bdel       ## Del buffer by number


##
##  vimrc
##
ssvrc          ##  Source vimrc again
\s


##
##  onebase
##
dfii              ##  v-split ii file of current file
dff [FILE_NAME]   ##  v-split FILE_NAME and diff
vh                ##  v-split the header file 


##
##  COMMAND
##
# http://rickey-nctu.blogspot.com/2009/02/vim-tip-pipe-vim.html
!dir              ##  Execute external COMMAND
r !dir            ##  Read data from external COMMAND
exec ":r ! cat -n ".expand("%")    ##  cat current file 
r !command        ## r !commond   在游標所在處次一行插入外部指令 commond 執行後的輸出內容. 例如 :r !date 就會插入日期時間.
.                 ## repeat previous command


##
##  游標
##
http://rickey-nctu.blogspot.tw/2009/02/vim.html
w "移動到下一個單字字首
W "移動到下一個單字字首，移動更多(某些標點符號不停)
e "移動到下一個單字字尾
E "移動到下一個單字字尾，移動更多(某些標點符號不停)
H "移到螢幕首
M "移到螢幕中
L "移到螢幕尾



##
## Plugin -- Vundle-for-Windows
## 
Vundle-for-Windows:
https://github.com/VundleVim/Vundle.vim/wiki/Vundle-for-Windows


|z<CR>|         z<CR>              重畫，游標移動到窗口的頂行的第一個非空白字
                                   符
|zN<CR>|        z{height}<CR>      重畫，使得窗口高度爲 {height} 行
|z+|            z+                 游標移動到第 N 行 (缺省爲窗口之後的第一
                                   行)，其他同 "z<CR>"
|z-|            z-                 重畫，游標移動到視窗末行的第一個非空白字元
|z.|            z.                 重畫，游標移動到窗口的中間行的第一個非空白
                                   字元
|z=|            z=                 給出拼寫建議
|zA|            zA                 遞迴打開一個關閉的折疊或關閉一個打開的折疊
|zC|            zC                 遞迴關閉折疊
|zD|            zD                 遞迴刪除折疊
|zE|            zE                 除去所有折疊
|zF|            zF                 爲 N 行建立折疊
|zG|            zG                 把單詞標記爲拼寫正確 (good)
|zM|            zM                 設置 'foldlevel' 爲零
|zN|            zN                 置位 'foldenable'
|zO|            zO                 遞迴打開折疊
|zR|            zR                 設置 'foldlevel' 爲最大折疊級別
|zW|            zW                 把單詞標記爲拼寫錯誤 (wrong)
|zX|            zX                 重新應用 'foldlevel'
|z^|            z^                 游標移動到第 N 行 (缺省爲窗口之前的一行)，
                                   其他同 "z-"
|za|            za                 打開關閉的折疊，或關閉打開的折疊
|zb|            zb                 重畫，游標在窗口底行
|zc|            zc                 關閉折疊
|zd|            zd                 刪除折疊
|ze|            ze                 'wrap' 關閉時，水平滾動使得游標定位到螢幕的
                                   尾部 (最右側)
|zf|            zf{motion}         爲 Nmove 文本建立折疊
|zg|            zg                 把單詞標記爲拼寫正確 (good)
|zh|            zh                 'wrap' 關閉時，水平右滾螢幕 N 個字元
|zi|            zi                 切換 'foldenable'
|zj|            zj              1  移動到下一個折疊的開始處
|zk|            zk              1  移動到前一個折疊的結束處
|zl|            zl                 'wrap' 關閉時，水平左滾螢幕 N 個字元
|zm|            zm                 從 'foldlevel' 減一
|zn|            zn                 重定 'foldenable'
|zo|            zo                 打開折疊
|zr|            zr                 給 'foldlevel' 加一
|zs|            zs                 'wrap' 關閉時，水平滾動使得游標定位到螢幕的
                                   起始處 (最左側)
|zt|            zt                 重畫，游標移動到窗口的頂部
|zw|            zw                 把單詞標記爲拼寫錯誤 (wrong)
|zv|            zv                 打開足夠的折疊，使得當前行可見
|zx|            zx                 重新應用 'foldlevel' 然後執行 "zv"
|zz|            zz                 重畫，游標移動到窗口的中間行
|z<Left>|       z<Left>            等同於 "zh"
|z<Right>|      z<Right>           等同於 "zl"

3. 可視模式                                             *visual-index*

可視模式下，大多數命令同普通模式的相同。以下列出的是不同的部分。

標簽            字元          備註 可視模式下的動作     
|v_CTRL-\_CTRL-N| CTRL-\ CTRL-N    結束可視模式
|v_CTRL-\_CTRL-G| CTRL-\ CTRL-G    轉到 'insertmode' 指定的模式
|v_CTRL-C|      CTRL-C             結束可視模式
|v_CTRL-G|      CTRL-G             在可視模式和選擇模式間切換
|v_<BS>|        <BS>            2  選擇模式: 刪除高亮區域
|v_CTRL-H|      CTRL-H          2  等同於 <BS>
|v_CTRL-O|      CTRL-O             從選擇模式切換到可視模式，只限於下個命令
|v_CTRL-V|      CTRL-V             使得可視模式面向列塊，或者退出可視模式
|v_<Esc>|       <Esc>              結束可視模式
|v_CTRL-]|      CTRL-]             跳轉到高亮的標簽上
|v_!|           !{filter}       2  通過外部命令 {filter} 過濾高亮行
|v_:|           :                  使用高亮行作爲範圍，開始一個命令行
|v_<|           <               2  左移高亮行一個 'shiftwidth'
|v_=|           =               2  用 {equalprg} 選項指定的外部程式過濾高亮行
|v_>|           >               2  右移高亮行一個 'shiftwidth'
|v_b_A|         A               2  列塊模式下: 在高亮區域的所有行後附加相同的
                                   文本
|v_C|           C               2  刪除高亮行，並開始插入
|v_D|           D               2  刪除高亮行
|v_b_I|         I               2  列塊模式: 在所有高亮行之前插入相同的文本
|v_J|           J               2  連接高亮行
|v_K|           K                  在高亮區域上運行 'keywordprg'
|v_O|           O                  水平移動到區域的另外一側
                Q                  不啓動 Ex 模式
|v_R|           R               2  刪除高亮行並開始插入
|v_S|           S               2  刪除高亮行並開始插入
|v_U|           U               2  使得高亮區域全變大寫
|v_V|           V                  使得可視區域面向行，或者退出可視模式
|v_X|           X               2  刪除高亮區域
|v_Y|           Y                  抽出高亮行
|v_a(|          a(                 等同於 ab
|v_a)|          a)                 等同於 ab
|v_a<|          a<                 擴展高亮區域，使包含一個 <> 塊
|v_a>|          a>                 等同於 a<
|v_aB|          aB                 擴展高亮區域，使包含一個 {} 塊
|v_aW|          aW                 擴展高亮區域，使包含 "一個 WORD"
|v_a[|          a[                 擴展高亮區域，使包含一個 [] 塊
|v_a]|          a]                 等同於 a[
|v_ab|          ab                 擴展高亮區域，使包含一個 () 塊
|v_ap|          ap                 擴展高亮區域，使包含一個段落
|v_as|          as                 擴展高亮區域，使包含一個句子
|v_aw|          aw                 擴展高亮區域，使包含 "一個單詞"
|v_a{|          a{                 等同於 aB
|v_a}|          a}                 等同於 aB
|v_c|           c               2  刪除高亮區域，並開始插入
|v_d|           d               2  刪除高亮區域
|v_gJ|          gJ              2  連接高亮行，不插入空格
|v_gq|          gq              2  排版高亮行
|v_gv|          gv                 交換現在和以前的高亮區域
|v_i(|          i(                 等同於 ib
|v_i)|          i)                 等同於 ib
|v_i<|          i<                 擴展高亮區域，使包含內含 <> 塊
|v_i>|          i>                 等同於 i<
|v_iB|          iB                 擴展高亮區域，使包含內含 {} 塊
|v_iW|          iW                 擴展高亮區域，使包含 "內含 WORD"
|v_i[|          i[                 擴展高亮區域，使包含內含 [] 塊
|v_i]|          i]                 等同於 i[
|v_ib|          ib                 擴展高亮區域，使包含內含 () 塊
|v_ip|          ip                 擴展高亮區域，使包含內含段落
|v_is|          is                 擴展高亮區域，使包含內含句子
|v_iw|          iw                 擴展高亮區域，使包含 "內含單詞"
|v_i{|          i{                 等同於 iB
|v_i}|          i}                 等同於 iB
|v_o|           o                  移動游標到區域的另一側
|v_r|           r               2  刪除高亮區域，並開始插入
|v_s|           s               2  刪除高亮區域，並開始插入
|v_u|           u               2  使得高亮區域全變小寫
|v_v|           v                  使得可視模式面向字元，或者退出可視模式
|v_x|           x               2  刪除高亮區域
|v_y|           y                  抽出高亮區域
|v_~|           ~               2  改變高亮區域的大小寫

4. 命令行編輯                                           *ex-edit-index*

使用 ':'、'!'、'/' 或 '?' 命令進入命令行編輯。
輸入普通字元會在當前游標位置插入該字元。
下面的 "補全" 指上下文相關的補全。如果可能，會補全檔案名、標簽、命令等。

                CTRL-@          不用
|c_CTRL-A|      CTRL-A          使用游標前面的模式進行補全，並插入所有的匹配
|c_CTRL-B|      CTRL-B          游標移動到命令行開始的地方
|c_CTRL-C|      CTRL-C          等同於 <ESC>
|c_CTRL-D|      CTRL-D          列出游標前面模式的所有補全
|c_CTRL-E|      CTRL-E          游標移動到命令行結束的地方
|'cedit'|       CTRL-F          'cedit' 的缺省值: 打開命令行窗口；否則不用
                CTRL-G          不用
|c_<BS>|        <BS>            刪除游標前面的字元
|c_digraph|     {char1} <BS> {char2}
                                'digraph' 打開時，輸入二合字母
|c_CTRL-H|      CTRL-H          等同於 <BS>
|c_<Tab>|       <Tab>           如果 'wildchar' 是 <Tab>: 補全游標前面的模式
|c_<S-Tab>|     <S-Tab>         等同於 CTRL-P
|c_wildchar|    'wildchar'      補全游標前面的模式 (缺省: <Tab>)
|c_CTRL-I|      CTRL-I          等同於 <Tab>
|c_<NL>|        <NL>            等同於 <CR>
|c_CTRL-J|      CTRL-J          等同於 <CR>
|c_CTRL-K|      CTRL-K {char1} {char2}
                                輸入二合字母
|c_CTRL-L|      CTRL-L          補全游標前的模式，並插入最長的公共子串
|c_<CR>|        <CR>            執行輸入的命令
|c_<CR>|        CTRL-M          等同於 <CR>
|c_CTRL-N|      CTRL-N          使用 'wildchar' 並有多個匹配: 轉到下一個匹配，
                                不然: 等同於 <Down>
                CTRL-O          不同
|c_CTRL-P|      CTRL-P          使用 'wildchar' 並有多個匹配: 轉到上一個匹配，
                                不然: 等同於 <Up>
|c_CTRL-Q|      CTRL-Q          等同於 CTRL-V，除非用於終端控制流
|c_CTRL-R|      CTRL-R {0-9a-z"%#*:= CTRL-F CTRL-P CTRL-W CTRL-A}
                                插入寄存器的內容或特殊物件到游標所在的地方，如
                                同直接輸入那樣
|c_CTRL-R_CTRL-R| CTRL-R CTRL-R {0-9a-z"%#*:= CTRL-F CTRL-P CTRL-W CTRL-A}
                                按本義插入寄存器的內容或特殊物件到游標所在的地
                                方
                CTRL-S          (用於終端控制流)
                CTRL-T          不用
|c_CTRL-U|      CTRL-U          刪除所有字元
|c_CTRL-V|      CTRL-V          按本義插入下一個非數位字元，或者插入其後三位數
                                字所代表的單個位元組。
|c_CTRL-W|      CTRL-W          刪除游標前面的單詞
                CTRL-X          不用 (保留作補全用)
                CTRL-Y          複製 (抽出) 無模式的選擇
                CTRL-Z          不用 (保留作暫停用)
|c_<Esc>|       <Esc>           放棄命令行，不執行
|c_<Esc>|       CTRL-[          等同於 <Esc>
|c_CTRL-\_CTRL-N| CTRL-\ CTRL-N  轉到普通模式，放棄命令行
|c_CTRL-\_CTRL-G| CTRL-\ CTRL-G  轉到 'insertmode' 指定的模式，放棄命令行
                CTRL-\ a - d    保留給擴展用
|c_CTRL-\_e|    CTRL-\ e {expr} 以 {expr} 的結果替換命令行
                CTRL-\ f - z    保留給擴展用
                CTRL-\ 其他     不用
|c_CTRL-]|      CTRL-]          啟動縮寫
|c_CTRL-^|      CTRL-^          切換 |:lmap| 映射的使用
|c_CTRL-_|      CTRL-_          'allowrevins'  打開時: 改變語言 (希伯來，波斯)
|c_<Del>|       <Del>           刪除游標所在的字元
|c_<Left>|      <Left>          游標左移
|c_<S-Left>|    <S-Left>        游標左移一個單詞
|c_<C-Left>|    <C-Left>        游標左移一個單詞
|c_<Right>|     <Right>         游標右移
|c_<S-Right>|   <S-Right>       游標右移一個單詞
|c_<C-Right>|   <C-Right>       游標右移一個單詞
|c_<Up>|        <Up>            從歷史中調入匹配游標前模式的前一個命令行
|c_<S-Up>|      <S-Up>          從歷史中調入前一個命令行
|c_<Down>|      <Down>          從歷史中調入匹配游標前模式的後一個命令行
|c_<S-Down>|    <S-Down>        從歷史中調入後一個命令行
|c_<Home>|      <Home>          游標移動到命令行開始的地方
|c_<End>|       <End>           游標移動到命令行結束的地方
|c_<PageDown>|  <PageDown>      等同於 <S-Down>
|c_<PageUp>|    <PageUp>        等同於 <S-Up>
|c_<Insert>|    <Insert>        切換插入/替換模式
|c_<LeftMouse>| <LeftMouse>     游標移動到滑鼠點擊的地方

亞瑟王，你找到 (聖杯) 了！                      *holy-grail*

5. EX 命令                                      *ex-cmd-index* *:index*

這裏是一個簡短但完整的 ":" 命令的列表。這裏不討論參數。命令可選的部分用 [] 括
起。命令按照名字非可選部分排序。

|:!|            :!              過濾行，或可通過外部命令執行之
|:!!|           :!!             重復上次的 ":!" 命令
|:#|            :#              等同於 ":number"
|:&|            :&              重復上次的 ":substitute"
|:star|         :*              執行寄存器的內容
|:<|            :<              將行左移一個 'shiftwidth'
|:=|            :=              顯示游標所在的行號
|:>|            :>              將行右移一個 'shiftwidth'
|:@|            :@              執行寄存器的內容
|:@@|           :@@             重復上次的 ":@"
|:Next|         :N[ext]         轉到參數列表的上一個文件
|:Print|        :P[rint]        顯示行
|:X|            :X              請求加密密鑰
|:append|       :a[ppend]       附加文本
|:abbreviate|   :ab[breviate]   輸入縮寫
|:abclear|      :abc[lear]      刪除所有的縮寫
|:aboveleft|    :abo[veleft]    使得分割的窗口出現在左側或者上方
|:all|          :al[l]          爲參數列表的每個文件打開一個窗口
|:amenu|        :am[enu]        爲所有模式輸入功能表項
|:anoremenu|    :an[oremenu]    爲所有模式輸入功能表項，不會被重新映射
|:args|         :ar[gs]         顯示參數列表
|:argadd|       :arga[dd]       增加專案到參數列表中
|:argdelete|    :argd[elete]    從參數列表中刪除專案
|:argedit|      :arge[dit]      增加專案到參數列表中並編輯之
|:argdo|        :argdo          在參數列表上的所有專案上執行一個命令
|:argglobal|    :argg[lobal]    定義全局參數列表
|:arglocal|     :argl[ocal]     定義本地參數列表
|:argument|     :argu[ment]     轉到參數列表一個指定的文件
|:ascii|        :as[cii]        顯示游標所在的字元的 ascii 值
|:autocmd|      :au[tocmd]      輸入或者顯示自動命令
|:augroup|      :aug[roup]      選擇要用的自動命令組
|:aunmenu|      :aun[menu]      刪除所有模式下的功能表
|:buffer|       :b[uffer]       轉到緩衝區列表裏的特定緩衝區
|:bNext|        :bN[ext]        轉到緩衝區列表裏的上一個緩衝區
|:ball|         :ba[ll]         爲緩衝區列表裏的每個緩衝區打開一個窗口
|:badd|         :bad[d]         增加緩衝區到緩衝區列表
|:bdelete|      :bd[elete]      從緩衝區列表刪除緩衝區
|:behave|       :be[have]       設置滑鼠和選擇行爲
|:belowright|   :bel[owright]   使得分割的窗口出現在右側或者下方
|:bfirst|       :bf[irst]       轉到緩衝區列表裏的第一個緩衝區
|:blast|        :bl[ast]        轉到緩衝區列表裏的最後一個緩衝區
|:bmodified|    :bm[odified]    轉到緩衝區列表裏的下一個修改過的緩衝區
|:bnext|        :bn[ext]        轉到緩衝區列表裏的下一個緩衝區
|:botright|     :bo[tright]     使得分割的窗口出現在最右側或者下方
|:bprevious|    :bp[revious]    轉到緩衝區列表裏的上一個緩衝區
|:brewind|      :br[ewind]      轉到緩衝區列表裏的第一個緩衝區
|:break|        :brea[k]        跳出 while 迴圈
|:breakadd|     :breaka[dd]     增加調試器中斷點
|:breakdel|     :breakd[el]     刪除調試器中斷點
|:breaklist|    :breakl[ist]    列出調試器中斷點
|:browse|       :bro[wse]       使用文件選擇對話方塊
|:bufdo|        :bufdo          爲所有列表內緩衝區執行命令
|:buffers|      :buffers        列出緩衝區列表裏的所有文件
|:bunload|      :bun[load]      卸載指定的緩衝區
|:bwipeout|     :bw[ipeout]     真正刪除一個緩衝區
|:change|       :c[hange]       替換一行或若干行
|:cNext|        :cN[ext]        跳轉到上一個錯誤
|:cNfile|       :cNf[ile]       跳轉到前一個文件的最後一個錯誤
|:cabbrev|      :ca[bbrev]      類似於 ":abbreviate"，但用於命令行模式
|:cabclear|     :cabc[lear]     清除所有縮寫，用於命令行模式
|:caddbuffer|   :caddb[uffer]   通過緩衝區補充錯誤
|:caddexpr|     :cad[dexpr]     通過運算式補充錯誤
|:caddfile|     :caddf[ile]     加入錯誤資訊到當前 quickfix 列表
|:call|         :cal[l]         調用函數
|:catch|        :cat[ch]        :try 命令的一部分
|:cbuffer|      :cb[uffer]      分析錯誤資訊並跳轉到第一個
|:cc|           :cc             跳轉到特定的錯誤
|:cclose|       :ccl[ose]       關閉 quickfix 窗口
|:cd|           :cd             改變目錄
|:center|       :ce[nter]       排版行，使其居中對齊
|:cexpr|        :cex[pr]        從運算式裏讀取錯誤並跳轉到第一個
|:cfile|        :cf[ile]        讀入含有錯誤資訊的文件，並跳轉到第一個
|:cfirst|       :cfir[st]       跳轉到指定的錯誤上，缺省爲第一個
|:cgetbuffer|   :cgetb[uffer]   從緩衝區裏得到錯誤
|:cgetexpr|     :cgete[xpr]     從表達實裏得到錯誤
|:cgetfile|     :cg[etfile]     讀入含有錯誤資訊的文件
|:changes|      :cha[nges]      顯示修改的列表
|:chdir|        :chd[ir]        改變當前目錄
|:checkpath|    :che[ckpath]    列出包含的頭文件
|:checktime|    :checkt[ime]    檢查載入緩衝區的時間標簽
|:clist|        :cl[ist]        列出所有錯誤
|:clast|        :cla[st]        跳轉到指定的錯誤上，缺省爲最後一個
|:close|        :clo[se]        改變當前窗口
|:cmap|         :cm[ap]         類似於 ":map"，但用於命令行模式
|:cmapclear|    :cmapc[lear]    清除所有映射，用於命令行模式
|:cmenu|        :cme[nu]        爲命令行模式增加功能表
|:cnext|        :cn[ext]        跳轉到下一個錯誤
|:cnewer|       :cnew[er]       跳轉到下一個較新的錯誤列表
|:cnfile|       :cnf[ile]       跳轉到下一個文件的第一個錯誤
|:cnoremap|     :cno[remap]     類似於 ":noremap"，但用於命令行模式
|:cnoreabbrev|  :cnorea[bbrev]  類似於 ":noreabbrev"，但用於命令行模式
|:cnoremenu|    :cnoreme[nu]    類似於 ":noremenu"，但用於命令行模式
|:copy|         :co[py]         複製行
|:colder|       :col[der]       跳轉到上一個較老的錯誤列表
|:colorscheme|  :colo[rscheme]  載入特定的色彩方案
|:command|      :com[mand]      建立用戶自定的命令
|:comclear|     :comc[lear]     清除所有用戶自定的命令
|:compiler|     :comp[iler]     爲特定編譯器設定選項
|:continue|     :con[tinue]     回到 :while 開始處
|:confirm|      :conf[irm]      需要確認時，提示用戶
|:copen|        :cope[n]        打開 quickfix 窗口
|:cprevious|    :cp[revious]    跳轉到上一個錯誤
|:cpfile|       :cpf[ile]       跳轉到上一個文件的最後一個錯誤
|:cquit|        :cq[uit]        退出 Vim，帶錯誤碼
|:crewind|      :cr[ewind]      跳到指定的錯誤，缺省爲第一個
|:cscope|       :cs[cope]       執行 cscope 命令
|:cstag|        :cst[ag]        使用 cscope 來跳轉到標簽上
|:cunmap|       :cu[nmap]       類似於 ":unmap"，但用於命令行模式
|:cunabbrev|    :cuna[bbrev]    類似於 ":unabbrev"，但用於命令行模式
|:cunmenu|      :cunme[nu]      刪除命令行的功能表
|:cwindow|      :cw[indow]      打開或者關閉 quickfix 窗口
|:delete|       :d[elete]       刪除行
|:delmarks|     :delm[arks]     刪除位置標記
|:debug|        :deb[ug]        在調試模式執行命令
|:debuggreedy|  :debugg[reedy]  從正常的輸入那裏讀取調試模式命令
|:delcommand|   :delc[ommand]   刪除用戶自定的命令
|:delfunction|  :delf[unction]  刪除用戶函數
|:diffupdate|   :dif[fupdate]   更新 'diff' 緩衝區
|:diffget|      :diffg[et]      刪除當前緩衝區的所有差異
|:diffoff|      :diffo[ff]      關閉 diff 模式
|:diffpatch|    :diffp[atch]    應用補丁然後顯示差異
|:diffput|      :diffpu[t]      刪除另外一個緩衝區的差異
|:diffsplit|    :diffs[plit]    顯示和另外一個文件的差異
|:diffthis|     :diffthis       使得當前窗口成爲 diff 窗口
|:digraphs|     :dig[raphs]     顯示或者輸入二合字母
|:display|      :di[splay]      顯示寄存器
|:djump|        :dj[ump]        跳轉到 #define
|:dlist|        :dl[ist]        列出所有的 #define
|:doautocmd|    :do[autocmd]    在當前緩衝區應用自動命令
|:doautoall|    :doautoa[ll]    在所有載入的緩衝區上應用自動命令
|:drop|         :dr[op]         跳到編輯某文件的窗口，不成功則在當前窗口編輯之
|:dsearch|      :ds[earch]      列出一個 #define
|:dsplit|       :dsp[lit]       分割窗口並跳轉到 #define
|:edit|         :e[dit]         編輯文件
|:earlier|      :ea[rlier]      回到舊的改變，撤銷
|:echo|         :ec[ho]         回顯運算式結果
|:echoerr|      :echoe[rr]      類似於 :echo，如同錯誤一樣顯示和使用歷史
|:echohl|       :echoh[l]       爲 echo 等命令設置高亮
|:echomsg|      :echom[sg]      等同於 :echo，在歷史裏放置消息
|:echon|        :echon          等同於 :echo，但不留 <EOL>
|:else|         :el[se]         :if 命令的一部分
|:elseif|       :elsei[f]       :if 命令的一部分
|:emenu|        :em[enu]        按名字執行功能表
|:endif|        :en[dif]        結束最近的 :if
|:endfor|       :endfo[r]       結束最近的 :for
|:endfunction|  :endf[unction]  結束用戶函數
|:endtry|       :endt[ry]       結束最近的 :try
|:endwhile|     :endw[hile]     結束最近的 :while
|:enew|         :ene[w]         編輯新的無名緩衝區
|:ex|           :ex             等同於 ":edit"
|:execute|      :exe[cute]      執行運算式的結果産生的字串
|:exit|         :exi[t]         等同於 ":xit"
|:exusage|      :exu[sage]      Ex 命令總覽
|:file|         :f[ile]         顯示或者設置當前檔案名
|:files|        :files          列出緩衝區列表的所有文件
|:filetype|     :filet[ype]     切換文件類型檢測的打開/關閉
|:find|         :fin[d]         在 'path' 裏找尋文件並編輯之
|:finally|      :fina[lly]      :try 命令的一部分
|:finish|       :fini[sh]       退出 Vim 腳本的執行
|:first|        :fir[st]        轉到參數列表的第一個文件
|:fixdel|       :fix[del]       設置 <Del> 的鍵碼
|:fold|         :fo[ld]         創建折疊
|:foldclose|    :foldc[lose]    關閉折疊
|:folddoopen|   :foldd[oopen]   對所有不在關閉折疊的行執行命令
|:folddoclosed| :folddoc[losed] 對所有在關閉折疊的行執行命令
|:foldopen|     :foldo[pen]     打開折疊
|:for|          :for            for 迴圈
|:function|     :fu[nction]     定義用戶函數
|:global|       :g[lobal]       對匹配的行執行命令
|:goto|         :go[to]         轉到緩衝區某位元組處
|:grep|         :gr[ep]         執行 'grepprg' 並轉到第一個匹配處
|:grepadd|      :grepa[dd]      類似 :grep，但附加到當前列表後
|:gui|          :gu[i]          啓動 GUI
|:gvim|         :gv[im]         啓動 GUI
|:hardcopy|     :ha[rdcopy]     發送文本到印表機
|:help|         :h[elp]         打開幫助窗口
|:helpfind|     :helpf[ind]     打開顯示幫助視窗的對話方塊
|:helpgrep|     :helpg[rep]     類似於 ":grep"，但搜索幫助文件
|:helptags|     :helpt[ags]     爲一個目錄産生幫助標簽
|:highlight|    :hi[ghlight]    指定高亮方法
|:hide|         :hid[e]         爲一個命令隱藏當前緩衝區
|:history|      :his[tory]      顯示歷史列表
|:insert|       :i[nsert]       插入文本
|:iabbrev|      :ia[bbrev]      類似於 ":abbrev"，但用於插入模式
|:iabclear|     :iabc[lear]     類似於 ":abclear"，但用於插入模式
|:if|           :if             條件滿足時執行命令
|:ijump|        :ij[ump]        跳轉到識別字的定義
|:ilist|        :il[ist]        列出匹配識別字的行
|:imap|         :im[ap]         類似於 ":map"，但用於插入模式
|:imapclear|    :imapc[lear]    類似於 ":map"，但用於插入模式
|:imenu|        :ime[nu]        爲插入模式增加功能表
|:inoremap|     :ino[remap]     類似於 ":noremap"，但用於插入模式
|:inoreabbrev|  :inorea[bbrev]  類似於 ":noreabbrev"，但用於插入模式
|:inoremenu|    :inoreme[nu]    類似於 ":noremenu"，但用於插入模式
|:intro|        :int[ro]        顯示介紹文字
|:isearch|      :is[earch]      列出匹配識別字的一行
|:isplit|       :isp[lit]       分割窗口，並跳轉到識別字的定義
|:iunmap|       :iu[nmap]       類似於 ":unmap"，但用於插入模式
|:iunabbrev|    :iuna[bbrev]    類似於 ":unabbrev"，但用於插入模式
|:iunmenu|      :iunme[nu]      刪除插入模式的功能表
|:join|         :j[oin]         連接行
|:jumps|        :ju[mps]        顯示跳轉表
|:k|            :k              設置位置標記
|:keepalt|      :keepa[lt]      跟隨的命令保持輪換文件不變
|:keepmarks|    :kee[pmarks]    跟隨的命令保持位置標記不變
|:keepjumps|    :keepj[jumps]   跟隨的命令保持跳轉表和位置標記不變
|:lNext|        :lN[ext]        轉到位置列表的上一個位置
|:lNfile|       :lNf[ile]       轉到上個文件的最近一個位置
|:list|         :l[ist]         顯示行
|:laddexpr|     :lad[dexpr]     通過運算式補充位置
|:laddbuffer|   :laddb[uffer]   通過緩衝區補充位置
|:laddfile|     :laddf[ile]     把位置加到當前位置列表裏
|:last|         :la[st]         轉到參數列表的最後一個文件
|:language|     :lan[guage]     設置語言 (locale)
|:later|        :lat[er]        轉到新的改變，重做
|:lbuffer|      :lb[uffer]      分析位置並跳轉到第一個位置
|:lcd|          :lc[d]          改變本地的目錄
|:lchdir|       :lch[dir]       改變本地的目錄
|:lclose|       :lcl[ose]       關閉位置窗口
|:lcscope|      :lcs[cope]      類似於 ":cscope"，但使用位置列表
|:left|         :le[ft]         左對齊行
|:leftabove|    :lefta[bove]    使得分割的窗口出現在左側或者上方
|:let|          :let            給變數或選項賦值
|:lexpr|        :lex[pr]        從運算式裏讀取位置並跳轉到第一個
|:lfile|        :lf[ile]        從文件裏讀取位置並跳轉到第一個
|:lfirst|       :lfir[st]       轉到指定的位置上，缺省第一個
|:lgetbuffer|   :lgetb[uffer]   從緩衝區裏讀取位置
|:lgetexpr|     :lgete[xpr]     從運算式裏讀取位置
|:lgetfile|     :lg[etfile]     從文件裏讀取位置
|:lgrep|        :lgr[ep]        運行 'grepprg' 並跳轉到第一個匹配
|:lgrepadd|     :lgrepa[dd]     類似於 :grep，但附加到當前列表上
|:lhelpgrep|    :lh[elpgrep]    類似於 ":helpgrep"，但使用位置列表
|:ll|           :ll             轉到指定位置
|:llast|        :lla[st]        轉到指定位置，缺省最後一個
|:llist|        :lli[st]        列出所有的位置
|:lmake|        :lmak[e]        執行外部命令 'makeprg' 並分析錯誤資訊
|:lmap|         :lm[ap]         類似於 ":map!"，但包括 Lang-Arg 模式
|:lmapclear|    :lmapc[lear]    類似於 ":mapclear!"，但包括 Lang-Arg 模式
|:lnext|        :lne[xt]        跳到下一個位置
|:lnewer|       :lnew[er]       跳到較新的位置列表
|:lnfile|       :lnf[ile]       跳到下一個文件的第一個位置
|:lnoremap|     :ln[oremap]     類似於 ":noremap!"，但包括 Lang-Arg 模式
|:loadkeymap|   :loadk[eymap]   載入後面的鍵盤映射表，直到 EOF 爲止
|:loadview|     :lo[adview]     從文件裏爲當前窗口載入視圖
|:lockmarks|    :loc[kmarks]    跟隨的命令保持位置標記不變
|:lockvar|      :lockv[ar]      給變數加鎖
|:lolder|       :lol[der]       轉到較舊的位置列表
|:lopen|        :lope[n]        打開位置窗口
|:lprevious|    :lp[revious]    轉到前一個位置
|:lpfile|       :lpf[ile]       轉到上一個文件的最近的位置
|:lrewind|      :lr[ewind]      轉到指定的位置，缺省第一個
|:ls|           :ls             列出所有的緩衝區
|:ltag|         :lt[ag]         跳轉到標簽，並把匹配的標簽加到位置列表上
|:lunmap|       :lu[nmap]       類似於 ":unmap!"，但包括 Lang-Arg 模式
|:lvimgrep|     :lv[imgrep]     在若干文件裏搜索模式
|:lvimgrepadd|  :lvimgrepa[dd]  類似於 :vimgrep，但附加到當前列表
|:lwindow|      :lw[indow]      打開或關閉位置窗口
|:move|         :m[ove]         移動行
|:mark|         :ma[rk]         設置位置標記
|:make|         :mak[e]         執行外部命令 'makeprg' 並分析其錯誤資訊
|:map|          :map            顯示或者輸入映射
|:mapclear|     :mapc[lear]     清除所有普通和可視模式的映射
|:marks|        :marks          列出所有的位置標記
|:match|        :mat[ch]        定義要高亮顯示的匹配的模式
|:menu|         :me[nu]         輸入新的功能表項
|:menutranslate| :menut[ranslate] 增加功能表翻譯專案
|:messages|     :mes[sages]     顯示以前顯示的消息
|:mkexrc|       :mk[exrc]       寫入當前映射和設置到文件
|:mksession|    :mks[ession]    寫入會話資訊到文件
|:mkspell|      :mksp[ell]      生成 .spl 拼寫文件
|:mkvimrc|      :mkv[imrc]      寫入當前映射和設置到文件
|:mkview|       :mkvie[w]       寫入當前窗口的視圖到文件
|:mode|         :mod[e]         顯示或者改變螢幕模式
|:mzscheme|     :mz[scheme]     執行 MzScheme 命令
|:mzfile|       :mzf[ile]       執行 MzScheme 腳本文件
|:nbkey|        :nb[key]        傳遞一個鍵給 Netbeans
|:next|         :n[ext]         跳轉到參數列表的下一個文件
|:new|          :new            創建一個新的空白窗口
|:nmap|         :nm[ap]         類似於 ":map"，但使用普通模式
|:nmapclear|    :nmapc[lear]    清除普通模式的所有映射
|:nmenu|        :nme[nu]        爲普通模式增加功能表
|:nnoremap|     :nn[oremap]     類似於 ":noremap"，但使用普通模式
|:nnoremenu|    :nnoreme[nu]    類似於 ":noremenu"，但使用普通模式
|:noautocmd|    :noa[utocmd]    跟隨的命令不啟動自動命令
|:noremap|      :no[remap]      輸入不會被重新映射的映射
|:nohlsearch|   :noh[lsearch]   暫停 'hlsearch' 高亮
|:noreabbrev|   :norea[bbrev]   輸入不會被重新映射的縮寫
|:noremenu|     :noreme[nu]     輸入不會被重新映射的功能表
|:normal|       :norm[al]       執行普通模式的命令
|:number|       :nu[mber]       顯示文本行時給出行號
|:nunmap|       :nun[map]       類似於 ":unmap"，但使用普通模式
|:nunmenu|      :nunme[nu]      刪除普通模式的功能表
|:open|         :o[pen]         啓動打開模式 (沒有實現)
|:omap|         :om[ap]         類似於 ":map"，但使用操作符等待模式
|:omapclear|    :omapc[lear]    刪除操作符等待模式的所有映射
|:omenu|        :ome[nu]        爲操作符等待模式增加功能表
|:only|         :on[ly]         關閉當前窗口，除了當前的窗口以外
|:onoremap|     :ono[remap]     類似於 ":noremap"，但使用操作符等待模式
|:onoremenu|    :onoreme[nu]    類似於 ":noremenu"，但使用操作符等待模式
|:options|      :opt[ions]      打開選項視窗
|:ounmap|       :ou[nmap]       類似於 ":unmap"，但使用操作符等待模式
|:ounmenu|      :ounme[nu]      刪除操作符等待模式的功能表
|:print|        :p[rint]        顯示行
|:profdel|      :profd[el]      停止剖視 (profile) 函數或腳本
|:profile|      :prof[ile]      剖視 (profile) 函數或腳本
|:promptfind|   :pro[mtfind]    打開 GUI 對話方塊進行搜索
|:promptrepl|   :promtr[epl]    打開 GUI 對話方塊進行搜索/替代
|:pclose|       :pc[lose]       關閉預覽窗口
|:pedit|        :ped[it]        在預覽窗口編輯文件
|:perl|         :pe[rl]         執行 Perl 命令
|:perldo|       :perld[o]       對每行都執行 Perl 命令
|:pop|          :po[p]          跳轉到標簽棧較舊的專案上
|:popup|        :pop[up]        根據名字彈出功能表
|:ppop|         :pp[op]         在預覽窗口 ":pop"
|:preserve|     :pre[serve]     寫入所有文本到交換文件
|:previous|     :prev[ious]     跳轉到參數列表裏的上一個文件
|:promptfind|   :pro[mptfind]   搜索對話方塊
|:promptrepl|   :promptr[epl]   搜索/替換對話方塊
|:psearch|      :ps[earch]      類似於 ":ijump"，但在預覽視窗顯示匹配
|:ptag|         :pt[ag]         在預覽視窗顯示標簽
|:ptNext|       :ptN[ext]       在預覽窗口 |:tNext|
|:ptfirst|      :ptf[irst]      在預覽窗口 |:trewind|
|:ptjump|       :ptj[ump]       在預覽窗口 |:tjump| 和顯示標簽
|:ptlast|       :ptl[ast]       在預覽窗口 |:tlast|
|:ptnext|       :ptn[ext]       在預覽窗口 |:tnext|
|:ptprevious|   :ptp[revious]   在預覽窗口 |:tprevious|
|:ptrewind|     :ptr[ewind]     在預覽窗口 |:trewind|
|:ptselect|     :pts[elect]     在預覽窗口 |:tselect| 和顯示標簽
|:put|          :pu[t]          插入寄存器的內容到文本
|:pwd|          :pw[d]          顯示當前目錄
|:python|       :py[thon]       執行 Python 命令
|:pyfile|       :pyf[ile]       執行 Python 腳本文件
|:quit|         :q[uit]         退出當前窗口 (如果只有一窗口，則退出 Vim)
|:quitall|      :quita[ll]      退出 Vim
|:qall|         :qa[ll]         退出 Vim
|:read|         :r[ead]         讀入文件到文本
|:recover|      :rec[over]      從交換文件裏恢復文件
|:redo|         :red[o]         重做一次撤銷的改變
|:redir|        :redi[r]        重定向消息到文件或者寄存器
|:redraw|       :redr[aw]       強迫顯示的重畫
|:redrawstatus| :redraws[tatus] 強迫狀態行的重畫
|:registers|    :reg[isters]    顯示寄存器的內容
|:resize|       :res[ize]       改變當前窗口的高度
|:retab|        :ret[ab]        改變製錶大小
|:return|       :retu[rn]       從用戶函數返回
|:rewind|       :rew[ind]       轉到參數列表的第一個文件
|:right|        :ri[ght]        右對齊文本
|:rightbelow|   :rightb[elow]   使得分割窗口出現在右側或者下方
|:ruby|         :rub[y]         執行 Ruby 命令
|:rubydo|       :rubyd[o]       對每行執行 Ruby 命令
|:rubyfile|     :rubyf[ile]     執行 Ruby 腳本文件
|:runtime|      :ru[ntime]      執行 'runtimepath' 裏的 vim 腳本
|:rviminfo|     :rv[iminfo]     讀取 viminfo 文件
|:substitute|   :s[ubstitute]   查找和替代文本
|:sNext|        :sN[ext]        分割窗口並轉到參數列表的前一個文件
|:sandbox|      :san[dbox]      在沙盤裏執行命令
|:sargument|    :sa[rgument]    分割窗口並轉到參數列表的某一個文件
|:sall|         :sal[l]         爲參數列表的每個文件打開窗口
|:saveas|       :sav[eas]       用別的名字保存文件。
|:sbuffer|      :sb[uffer]      分割窗口並轉到緩衝區列表的某一個文件
|:sbNext|       :sbN[ext]       分割窗口並轉到緩衝區列表的前一個文件
|:sball|        :sba[ll]        爲緩衝區列表的每個文件打開窗口
|:sbfirst|      :sbf[irst]      分割窗口並轉到緩衝區列表的第一個文件
|:sblast|       :sbl[ast]       分割窗口並轉到緩衝區列表的最後一個文件
|:sbmodified|   :sbm[odified]   分割窗口並轉到緩衝區列表的修改過的文件
|:sbnext|       :sbn[ext]       分割窗口並轉到緩衝區列表的後一個文件
|:sbprevious|   :sbp[revious]   分割窗口並轉到緩衝區列表的前一個文件
|:sbrewind|     :sbr[ewind]     分割窗口並轉到緩衝區列表的第一個文件
|:scriptnames|  :scrip[tnames]  列出所有執行過的 Vim 腳本的名字
|:scriptencoding| :scripte[ncoding]     執行過的 Vim 腳本使用的編碼
|:scscope|      :scs[cope]      分割窗口並執行 cscope 命令
|:set|          :se[t]          顯示或設置選項
|:setfiletype|  :setf[iletype]  設置 'filetype'，除非已經設置過
|:setglobal|    :setg[lobal]    顯示或者設置全局選項值
|:setlocal|     :setl[ocal]     顯示或者設置本地選項值
|:sfind|        :sf[ind]        分割當前窗口並編輯 'path' 的文件
|:sfirst|       :sfir[st]       分割窗口並轉到參數列表的第一個文件
|:shell|        :sh[ell]        退到外殼程式
|:simalt|       :sim[alt]       Win32 GUI: 類比 Windows ALT 鍵
|:sign|         :sig[n]         操作標號
|:silent|       :sil[ent]       安靜地運行命令
|:sleep|        :sl[eep]        幾秒內不作任何事
|:slast|        :sla[st]        分割窗口並轉到參數列表的最後一個文件
|:smagic|       :sm[agic]       帶 'magic' 的 :substitute
|:smap|         :sma[p]         類似於 ":map"，但用於選擇模式
|:smapclear|    :smapc[lear]    刪除選擇模式所有的映射
|:smenu|        :sme[nu]        增加選擇模式功能表
|:snext|        :sn[ext]        分割窗口並轉到參數列表的下一個文件
|:sniff|        :sni[ff]        發送請求到 sniff
|:snomagic|     :sno[magic]     帶 'nomagic' 的 :substitute
|:snoremap|     :snor[emap]     類似於 ":noremap"，但用於選擇模式
|:snoremenu|    :snoreme[nu]    類似於 ":noremenu"，但用於選擇模式
|:sort|         :sor[t]         給行排序
|:source|       :so[urce]       從文件裏讀取 Vim 或 Ex 命令
|:spelldump|    :spelld[ump]    分割窗口並用正確的單詞填充
|:spellgood|    :spe[llgood]    增加拼寫的好詞
|:spellinfo|    :spelli[nfo]    顯示載入的拼寫文件的資訊
|:spellrepall|  :spellr[epall]  像上次 |z=| 那樣，但替換所有的壞詞
|:spellundo|    :spellu[ndo]    刪除好詞或壞詞
|:spellwrong|   :spellw[rong]   增加拼寫錯誤
|:split|        :sp[lit]        分割當前窗口
|:sprevious|    :spr[evious]    分割窗口並轉到參數列表的前一個文件
|:srewind|      :sre[wind]      分割窗口並轉到參數列表的第一個文件
|:stop|         :st[op]         暫停編輯器並退回外殼
|:stag|         :sta[g]         分割窗口並跳轉到標簽上
|:startgreplace| :startg[replace] 開始虛擬替換模式
|:startreplace| :startr[eplace] 開始替換模式
|:startinsert|  :star[tinsert]  開始插入模式
|:stopinsert||  :stopi[nsert]   退出插入模式
|:stjump|       :stj[ump]       執行 ":tjump" 並分割窗口
|:stselect|     :sts[elect]     執行 ":tselect" 並分割窗口
|:sunhide|      :sun[hide]      等同於 ":unhide"
|:sunmap|       :sunm[ap]       類似於 ":unmap"，但用於選擇模式
|:sunmenu|      :sunme[nu]      刪除選擇模式的功能表
|:suspend|      :sus[pend]      等同於 ":stop"
|:sview|        :sv[iew]        分割視窗並以唯讀模式編輯文件
|:swapname|     :sw[apname]     顯示當前交換文件的名字
|:syntax|       :sy[ntax]       語法高亮
|:syncbind|     :sync[bind]     同步滾動綁定
|:t|            :t              等同於 ":copy"
|:tNext|        :tN[ext]        跳轉到上一個匹配的標簽
|:tabNext|      :tabN[ext]      跳到上一個標簽頁
|:tabclose|     :tabc[lose]     關閉當前標簽頁
|:tabdo|        :tabdo          爲每個標簽頁執行命令
|:tabedit|      :tabe[dit]      在新標簽頁裏編輯文件
|:tabfind|      :tabf[ind]      尋找 'path' 裏的文件，在新標簽頁裏編輯之
|:tabfirst|     :tabfir[st]     轉到第一個標簽頁
|:tablast|      :tabl[ast]      轉到最後一個標簽頁
|:tabmove|      :tabm[ove]      把標簽頁移到別的位置
|:tabnew|       :tabnew         在新標簽頁裏編輯文件
|:tabnext|      :tabn[ext]      轉到下一個標簽頁
|:tabonly|      :tabo[nly]      關閉所有除了當前標簽頁以外的所有標簽頁
|:tabprevious|  :tabp[revious]  轉到前一個標簽頁
|:tabrewind|    :tabr[ewind]    轉到第一個標簽頁
|:tabs|         :tabs           列出標簽頁以及裏面包含的內容
|:tab|          :tab            打開新窗口時建立新的標簽頁
|:tag|          :ta[g]          跳轉到標簽上
|:tags|         :tags           顯示標簽棧的內容
|:tcl|          :tc[l]          執行 Tcl 命令
|:tcldo|        :tcld[o]        爲每行執行 Tcl 命令
|:tclfile|      :tclf[ile]      執行 Tcl 腳本文件
|:tearoff|      :te[aroff]      撕下一個功能表
|:tfirst|       :tf[irst]       轉到第一個匹配的標簽
|:throw|        :th[row]        抛出例外
|:tjump|        :tj[ump]        類似於 ":tselect"，只有一個匹配時直接跳轉之
|:tlast|        :tl[ast]        跳轉到最後一個匹配的標簽
|:tmenu|        :tm[enu]        定義功能表的工具提示
|:tnext|        :tn[ext]        跳轉到下一個匹配的標簽
|:topleft|      :to[pleft]      使得分割的窗口出現在頂部或者最左端
|:tprevious|    :tp[revious]    跳轉到上一個匹配的標簽
|:trewind|      :tr[ewind]      跳轉到第一個匹配的標簽
|:try|          :try            執行命令，錯誤或者例外時終止
|:tselect|      :ts[elect]      列出匹配的標簽並從中選擇一個
|:tunmenu|      :tu[nmenu]      刪除功能表的工具提示
|:undo|         :u[ndo]         撤銷最近的改變
|:undojoin|     :undoj[oin]     將下一個改變和上一個撤銷塊合併
|:undolist|     :undol[ist]     列出撤銷樹的葉結點
|:unabbreviate| :una[bbreviate] 刪除縮寫
|:unhide|       :unh[ide]       爲緩衝區列表裏每個載入的文件打開窗口
|:unlet|        :unl[et]        刪除變數
|:unlockvar|    :unlo[ckvar]    給變數解鎖
|:unmap|        :unm[ap]        刪除映射
|:unmenu|       :unme[nu]       刪除功能表
|:update|       :up[date]       如果有修改，寫回緩衝區
|:vglobal|      :v[global]      對不匹配的行，執行命令
|:version|      :ve[rsion]      顯示版本號和其他資訊
|:verbose|      :verb[ose]      執行命令，過程中設置 'verbose'
|:vertical|     :vert[ical]     使得跟隨的命令垂直分割
|:vimgrep|      :vim[grep]      在若干文件裏查找模式
|:vimgrepadd|   :vimgrepa[dd]   類似於 :vimgrep，但附加到當前列表
|:visual|       :vi[sual]       等同於 ":edit"，但關掉 "Ex" 模式
|:viusage|      :viu[sage]      普通模式命令的總覽
|:view|         :vie[w]         以唯讀方式編輯文件
|:vmap|         :vm[ap]         類似於 ":map"，但使用可視+選擇模式
|:vmapclear|    :vmapc[lear]    刪除可視+選擇模式所有的映射
|:vmenu|        :vme[nu]        爲可視+選擇模式增加功能表
|:vnew|         :vne[w]         建立新的空白窗口，垂直分割
|:vnoremap|     :vn[oremap]     類似於 ":noremap"，但使用可視+選擇模式
|:vnoremenu|    :vnoreme[nu]    類似於 ":noremenu"，但使用可視+選擇模式
|:vsplit|       :vs[plit]       垂直分割當前窗口
|:vunmap|       :vu[nmap]       類似於 ":unmap"，但使用可視+選擇模式
|:vunmenu|      :vunme[nu]      刪除可視+選擇模式的功能表
|:windo|        :windo          爲每個窗口執行命令
|:write|        :w[rite]        寫回文件
|:wNext|        :wN[ext]        寫回文件，然後跳轉到參數列表的前一個文件
|:wall|         :wa[ll]         寫回所有 (改變的) 緩衝區
|:while|        :wh[ile]        只要條件滿足，執行循環體
|:winsize|      :wi[nsize]      取得或者設置窗口大小 (已廢棄)
|:wincmd|       :winc[md]       執行窗口 (CTRL-W) 命令
|:winpos|       :winp[os]       取得或者設置窗口位置
|:wnext|        :wn[ext]        寫回文件，然後跳轉到參數列表的下一個文件
|:wprevious|    :wp[revious]    寫回文件，然後跳轉到參數列表的前一個文件
|:wq|           :wq             寫回文件，然後退出窗口或者 Vim
|:wqall|        :wqa[ll]        寫回所有 (改變的) 緩衝區然後退出 Vim
|:wsverb|       :ws[verb]       把動詞通過 IPC 發送給 workshop
|:wviminfo|     :wv[iminfo]     寫入 viminfo 文件
|:xit|          :x[it]          如果緩衝區被改動，寫入之。然後退出窗口或者 Vim
|:xall|         :xa[ll]         等同於 ":wqall"
|:xmapclear|    :xmapc[lear]    刪除可視模式的所有映射
|:xmap|         :xm[ap]         類似於 ":map"，但使用可視模式
|:xmenu|        :xme[nu]        增加可視模式的功能表
|:xnoremap|     :xn[oremap]     類似於 ":noremap"，但使用可視模式
|:xnoremenu|    :xnoreme[nu]    類似於 ":noremenu"，但使用可視模式
|:xunmap|       :xu[nmap]       類似於 ":unmap"，但使用可視模式
|:xunmenu|      :xunme[nu]      刪除可視模式的功能表
|:yank|         :y[ank]         抽出行到寄存器
|:z|            :z              顯示一些行
|:~|            :~              重復上次 ":substitute"
